객체지향 디자인은 프로그래머가 더 나은 흐름의 프로그램을 만들기 위해 계획을 세우도록 강제하는 컨셉이다. 객체지향 설계의 시작은 말이 많지만, 첫 언어는 Simula 와 SmallTalk 이다. 이 용어는 Grady Booch 가 객체지향디자인 책을 낼 때 까지 유명해지지 않았다.

객체지향 설계는 프로그래머를 돕기위한 5가지 컨셉 도구들을 갖고 있는 프로그래밍 언어로 정의 된다. 이런 프로그램들은 보통 비객체지향 프로그램보다 가독성이 좋고, 지역성이 있어서 디버깅하기 쉬워진다.
5가지의 객체지향 디자인의 기본 컨셉은 구현단계의 특징으로, 프로그래밍 언어에 녹아있다. 이 특징들은 보통 아래와 같은 이름으로 불린다.
- 캡슐화 : 데이터를 만지는 메소드나 함수와 자료구조의 강한 결합/응집이다. 이것은 클래스나 객체라고 불린다.
- 데이터 보호 : 외부의 개체로부터 객체의 컴포넌트들을 보호하는 것이다. 이건 자신의 클래스에서 해당 언어의 키워드로 private / protected 로 선언된 변수를 쓰면서 사용 가능하다.
- 상속 : 이 특징은 다른 클래스의 기능을 확장/덮어쓸 수 있는 것이다. 자식 클래스라고 불리는 것은 부모 클래스의 모든 것을 물려받아서 사용 가능하면서, 또한 자기 자신의 기능과 데이터를 추가로 가질 수 있다.
- 인터페이스 : 객체의 인스턴스를 조작하기위한 함수, 메소드, 특징의 정의이다.
- 다형성 : 이 특징은 다른 함수나 클래스들이 같은 이름을 같지만 다른 데이터 타입을 가질 수 있도록 해준다.
일단 유명해지고 나면, 새로운 언어로부터 몇몇 컨셉들이 나오는게 있다. 새로운 3가지의 주요한 스탠다드가 있다.
- 재사용성 : 여러 프로그램에서 코드 재사용을 위한 것이다. 만약 프로그래머가 이미 좋은 함수를 짰다면, 어떤 프로그램에서든 호출하고, 똑같이 동작해야 한다.
- 보안 : 큰 프로그램에서 중요하고, 데이터 손실을 막는다.
- 문서화 : 주석 안의 코멘트는 기계어로 변환되지 않는다. 이 마크업은 프로그래머가 원하는한/허락하는한 다양한 정보를 새로운 프로그래머에게 전달할 것이다. 이것은 프로그램의 재사용성과 유지성에 중요하다.