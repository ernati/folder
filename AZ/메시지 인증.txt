메세지 인증은 다음 세 가지 목적에 따른 대안을 가진다.
 -메세지의 무결성 확보 -> 해시 함수
 -발행인의 유효성 검사 -> 메세지 암호화
 -부인 불가 -> 메세지 인증 코드
공통점은 결국 '이 메세지가 발신자로부터 나에게 전송된 메세지인지 어떻게 확인하는가'이다.

1) Symmetric Message Encryption
Encryption으로도 authentication을 수행할 수 있다. 그러나 데이터의 무결성을 Encyrption이 보장할 수는 없다. 암호화 된 결과를 전송받았으나, 애초부터 변조된 데이터가 암호화 되어서 온 것인지 알아 챌 수 없기 때문이다. 단순 텍스트 데이터가 왔을 때는 읽어보면 알 수 있을지도 모르겠지만 파일이 바이터리 데이터로 넘어오면 알아보기가 힘들기 때문이다. 때문에 redundancy나 checksum을 이용하여 바이너리 변조를 방지할 수 있겠지만 이들도 완벽하지는 않다. 예를 들어 checksum은 변조를 detection 할 수는 있지만 어느 부분에서 어떤 변조가 이루어졌는지는 알 수 없다.
결론은, Symmetric Message Encryption은 메세지의 내용을 보호할 수는 있지만 데이터의 무결성을 보장할 수는 없다.

2) Public-Key Message Encryption
공개키를 이용한 메세지 암호화는 송신자의 신원을 파악할 수는 있다는 장점이 있어 securecy와 authentication을 동시에 만족할 수 있지만, 여전히 데이터의 무결성은 보장할 수 없다. 여전히 전송받은 데이터에가 안전하다는 보장은 할 수 없다.

​3) MAC( Message Authentication Code)
MAC는 메세지와 비밀키가 결합한 결과이다. MAC는 송신자에 대한 인증과 데이터 무결성을 모두 보장할 수 있는 방법이다. MAC=C(K,M)으로 연산하여 메세지를 전송할 때 메세지 뒤에 덧붙여 보낸다.(M||C)

그렇다면 왜 MAC인가?
앞서 소개된 Symmetric Message Encryption이나 Public-Key Message Encryption에 비하여 데이터의 무결성(Integrity)을 보장할 수 있기 때문이다. 이들 Encryption에 비하며 지속력도 있다. 주의해야 할 점은 MAC은 앞서 공부한 Digital Signature와는 분명히 다르다. Digital Signature는 '절대' 대칭키 시스템상에서 일어날 수 없다. 위의 개념도의 키값 K는 공유되어있으므로 대칭키 시스템을 이용한 구조이므로 MAC은 Digital Signature와 분명히 다르다.

4) MAC의 특징
MAC은 암호에서 쓰이는 암호적 checksum이며, MAC의 길이는 고정되어 있으므로 다양한 길이의 메세지를 효율적으로 전달할 수 있다. 또한 상호간에만 알고 있는 대칭키 K를 공유한다. MAC는 many-to-one function으로서, 이론상으로는 많은 메세지 데이터들이 같은 MAC값을 만들어 낼 수는 있으나 현실적으로 그 계산이 매우 어렵다.

5) MAC의 필요조건
- 동일한 MAC값을 만들어 내기가 매우 어려워야한다.
- MAC값을 구성하는 숫자들이 잘 분배되어야 한다.(unyformly distributed)
- MAC값의 결정에 영향을 미치는 정도는 모든 원본 메세지 블록이 동일한 영향도를 가져야 한다.(즉, 모든 input에 종속적이어야 한다.)

우리가 데이터를 보낼 때는 Encryption도 해야 하고, 인증도 필요하다. 즉, securecy와 authentication을 동시에 확보하기 위해서는 여러가지 접근법이 사용되어왔다.​

Hash-then-encrypt : E(K, (M || H(M) )
MAC-then-encrypt : E(K2, (M || MAC(K1, M) )
Encrypt-then-MAC : (C = E(K2, M) , T = MAC(K1, C) )  
Encrypt-and-MAC : ( C = E(K2, M), T = MAC(K1, M) ) 

6) HMAC
Hash function을 이용하여 condensing하며, ipad와 opad는 길이를 맞추기 위해 패딩하는데 쓰이는 상수값이다. 상호간에 키값은 미리 공유되고, 노출되어서는 안된다. 중간에 쓰이는 해시 알고리즘은 어떤 것이든 사용될 수 있다.
HMAC의 보안성은 전적으로 사용되는 해시 알고리즘에 달려있다. HMAC의 취약점은 결국 해시의 취약점과 동일하다. Birthday attack이 가능하고, brute force가 가능하다.

7) CBC MAC - DAA(Data Authentication Algorithm)
DES를 배울 때 보았던 CBC의 개념도이다. MAC값을 사용하는데 Hash를 쓰지 않는 것도 있다. 앞서 배운 블록 암호 알고리즘에서 CBC의 맨 마지막 값을 MAC으로 사용하기도 한다. 이를 사용할 수 있는 이유는 MAC의 필요조건을 살펴보면 알 수 있다. CBC의 특징에는 앞선 블록의 결과가 다음 블록의 입력값이 된다. 따라서 input에 종속적이며, 키값도 사용된다.
DAA는 DES=CBC 기반의 널리 쓰이는 MAC이다. 입력값으로 0을 사용하고 final block은 0으로 패딩하며, 가장 좌측의 M bit이 final block으로 사용된다. 이 때 M은 16<=M<=64 를 만족한다.

8) CMAC
k1, k2는 상수이고 사용자의 key값으로부터 자동 생성되는 값이므로 따로 기억할 필요는 없다. DAA와 기본 개념은 똑같다. 따라서 당연히 CBC 방식을 사용한다. 마찬가지로 input에 대해서 종속적이며,  앞선 DAA에서 암호화 알고리즘으로 DES를 사용했다면 CMAC은 AES이다.
현재의 상용 시스템에서는 CMAC을 많이 사용한다.

9) CCM (Counter with Cipher Block Chaining-Message)
Encrypt 방식은 CTR, MAC은 CMAC으로 계산한다. 사용된 알고리즘은 AES이다. 앞선 접근법 중 Encrypt-and-MAC에 해당한다. MAC 값을 계산할 때와 암호화 할 때 동일한 키값을 사용한다. 여기서 Nonce는 replay attack을 방지하기 위해 사용하며, CCM은 Wifi에 쓰이고 있다.
Authentication 단계에서 Ass data는 친증과 관련한 추가 데이터를 의미한다. Authentiaction 에서 얻은 Tag를 Ctr0 태그를 이용해서 계산한 결과와 XOR 한 뒤, CTR cipher 뒤에 붙이면 CCM cipher가 된다.

​