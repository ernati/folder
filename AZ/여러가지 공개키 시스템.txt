01. Diffie-Hellman Key Exchange
개인키를 안전하게 주고받는 Key Exchange에 대한 방법이며, 상용으로 많이 쓰이고 있다. 방법은 다음과 같다. 양쪽이 공개된 정보를 교환하기 전에, 매우 큰 소수 q를 설정한다. 그리고 mod q의 primitive root인 a를 구한다. 각 사용자들은 자신의 개인키 X를 선택하되, q보다 작은 수로 한다. 이에 대응하는 공개키 Y는 Y=a^X mod q를 만족한다. a, q와 함께 공개키는 모두 공개되지만 X는 공개되지 않는다. 그렇게 하더라도 Discrete logarithm에 의해 X를 알아낼 수는 없다.
즉, Diffi-Hellman protocol은 공개된 정보만 교환하여 특정 비밀값을 만들어내는 것이다. 통신 과정은 다음과 같아진다.

A는 B에게 자신의 공개키 YA를 보낸다.
B는 YA에 자신의 개인키XB를 제곱하여 키값으로 생성한다. 이제 A도 마찬가지로 같은 K값을 생성할 수 있어야 한다.
B는 다시 자신의 공개키 YB를 보낸다.
A는 YB에 자신의 개인키 XA를 제곱하여 키값으로 생성한다. 계산 결과는 B에서 생성한 K와 같다.

양쪽에서 동일한 K값이 생성되었으므로 지금부터는 K를 이용한 대칭키 알고리즘을 사용할 수 있게 된다.
사전에 양쪽이 공유한 정보가 없음에도 동일한 키를 갖게 되는 유용한 방식이다.
그러나 Diffi-Hellman 프로토콜은 치명적인 결함을 가지고 있다. 암호 프로토콜의 보안성은 두 가지를 확인해야 한다. 첫째, 정말 내가 알고있는 발신지가 맞는가? 둘째, 내가 방금 요청한 것에 대하여 돌아온 응답이 맞는가? 이다.
Diffi-Hellman 프로토콜은 보다시피 발신지에 대해 확인하는 절차가 전혀 없다. 따라서 MITM 공격이 가능해진다.
이러한 이유로 우리는 Authentication이 필요해졌다. Diffi-Helman의 경우 YA와 YB에 대한 authentication이 필요하다.

​2. ElGamal Cryptography
Diffi-Hellman 방식과 유사하며, 갈로이스 필드에서 exponentation 을 이용한다. 마찬가지로 discrete logarithm을 바탕으로 하는 공개키 방식이다. 방식은 다음과 같다.

A가 B에게 메세지를 보내는 상황을 가정하자.
각각의 사용자는 Diffi-Hellman과 같은 방법으로 1 < X < q-1 을 만족하는 개인키 X를 선택한다. 그리고 그들의 공개키 Y 는 역시 a^X mod q가 된다.
0<= M <= q-1 을 만족하는 메세지 M이 있고, 1< k < q-1을 만족하는 random integer k를 선택한다. 이 k는 절대 재사용되지 않는다.
K = YA^k mod q로 키값을 생성한다. 이를 M과 곱하여 정수쌍 (C1, C2)를 만들어내고 이를 전송한다.
C1 =a^k mod q, C2 = KM mod q
(C1, C2)를 받은 B는 메세지를 다음과 같이 확인할 수 있다.
K = C1^XB mod q 를 계산하면 (a^k)^XA mod q = YA^k mod q = K 이므로 이므로 A가 생성한 것과 동일한 키값을 생성할 수 있다.
이어서 M = C2 * K의역수 mod q를 계산하면 원본 메세지를 얻을 수 있다.

​3. 타원 곡선 알고리즘(Elliptic Curve Cryptography)
지금까지의 공개키 알고리즘은 큰 수의 지수연산을 이용했지만, 타원 곡선 알고리즘은 지수 연산을 이용하지 않고도 작은 수를 이용하여 큰 수의 지수 연산의 효과를 갖는다. 그렇게 되면 사용하는 bit가 적어지기 때문에 부하가 줄어들기 때문에 대부분의 상용 시스템에서는 타원 곡선 알고리즘을 사용한다.
이 챕터에서 우리가 고려하는 타원곡선식은 단 하나다.
y = x^3 + ax + b
x,y,a,b는 모두 실수이고, a와 b값의 변화에 따라 타원 곡선이 그려진다.
특이하게도 타원곡선에서 두 점 P와 Q를 더한 P+Q는 새롭게 정의된다. P+Q는 P와 Q를 지나는 직선과 타원 곡선이 만나는 점의 맞은편 점을 가리킨다.
또한, 점 P(x,y)일 때 -P는 (x,-y)로 정의한다.

위의 타원곡선을 이용하면 discrete logarithm과 동일한 복잡도를 얻을 수 있다. 예를 들어 점 P를 타원곡선상에서 몇 번 더해야 (3,7)을 얻을 수 있는가?에 대한 문제는 어렵다. 형태만 다를 뿐 본질적으로는 완전히 동일하다. 이를 이용하여 Diffie-Hellman 프로토콜을 구현하면 다음과 같다.​

각각의 사용자 A와 B는 GF(q)에서 적절한 타원곡선 Eq(a,b)를 선택하고, 시작점이 될 base point G=(x1,y1)을 선택한다. 이 때, 타원곡선상에서 덧셈으로 nG = (0,0)이 나오는 n이 클수록 좋다.
A와 B는 각자의 개인키 nA, nB를 선택하되, n보다 작아야한다.(nA < n)
이에 대한 공개키 PA PB는, PA=nAG , PB = nBG 가 된다.(G is base point)
이제 둘 사이에 대칭키 알고리즘을 이용한 통신을 하기 위한 키값 K 는 K=nAnBG 로 구할 수 있다.
이렇게 되면 기존의 D-H 와 마찬가지로 K를 알기가 어렵기 때문에 discrete logarithm과 같은 효과를 얻을 수 있는 것이다.