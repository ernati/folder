전자 서명은 MAC과 분명히 다르다. 전자 서명은 비대칭키 시스템을 이용하지만, MAC은 대칭키 시스템을 이용한다. 전자 서명이라는 것은 서명자만이 만들어 낼 수 있어야 하기 때문이다. 또 하나, MAC로는 할 수 없는 것을 전자서명은 할 수 있다. MAC은 메세지를 주고받는 상호간에만 검증이 이루어지지만, 전자 서명은 서명자만이 서명할 수 있지만 검증은 모두가 할 수 있다는 것이다. 연예인이 종이에 사인을 해 주면 그 사인을 다른 사람에게 보여주었을 때 누가 봐도 그 연예인의 사인이라는 것을 알 수 있는 것이 서명이다.​

전자 서명은 몇가지 기능을 제공한다.
- 작성자, 작성 날짜, 시간 등을 검증할 수 있다.
- 메세지 내용을 authentication 한다.
- 제 3자에 의해서도 검증될 수 있다.​

보다시피 단순 인증의 기능만 수행하는 것이 아니다. 따라서 전자 서명에는 authentication을 위한 함수가 추가적으로 포함되어야 한다.
서명하고자 하는 메세지가 있고 서명자의 개인키로 암호화 하는 것이 전자 서명이다. 그러나 바로 암호화 하는 것이 아니라 해시 함수를 거쳐 사이즈를 줄여서 그 결과를 개인키로 암호화한다. 그 이유는 암호화 할 때는 M을 고정된 사이즈로 잘라서 버리거나 여러 번 암호화 하는 수 밖에 없기 때문이다.
이 서명 블록을 확인하는 것은 쉽다. 서명 결과로 나온 서명 블록 S를 송신자의 공개키로 복호화 하면 개인키 암호화 이전의 해시값을 얻을 수 있다. 이 값과, 실제 메세지를 해시한 해시값이 일치하는지 비교해보면 된다.

​네 가지 형태의 공격이 있을 수 있다.
- 서명자의 공개키만을 이용하는 경우(Key only attack)
- 공격자가 서명자의 서명과 메세지를 알고 이용하는 경우(Known message attack)
- 공격자가 메세지를 선택하고 그 메세지에 대한 서명을 얻을 수 있는 경우(Chosen message attack)
- 이미 만들어진 서명으로부터 새로운 서명을 만들어 낼 수 있는 경우(Adaptive chosen message attack)

위조는 다음과 같은 유형이 있을 수 있다.
- Total break( 서명자의 개인키를 알아낸 경우)
- Universal forgery( 서명자의 개인키를 알아내지는 못했지만 서명 과정과 유사한(equivalent) 알고리즘을 발견한 경우)
- Selective forgery( 특정 메세지를 위조할 수 있는 경우)
- Existential forgery( 전체 메세지를 컨트롤 할 수는 없지만 최소한 하나 이상의 메세지에 대한 서명을 위조할 수 있는 경우)​

Selective forgery와 Existential forgery의 차이점은 둘 다 일부 메세지만 위조할 수 있는 경우를 의미하지만 Existential forgery는 공격자가 의도했던 의도한 것이 아니던 의미가 있던 없던 아무 메세지나 하나라도 위조할 수 있는 경우를 의미한다.

전자서명의 필요조건은 다음과 같다.
- 서명된 메세지에 따라 output이 달라야 한다.
- 위조와 부인을 방지하기 위해 송신자의 unique한 정보를 이용해야 한다.
- 만들어내기 쉬어야 한다.
- 검증이 쉬워야 한다.
- 위조는 산술적으로 거의 불가능해야 한다.
- 저장 공간을 많이 차지해서는 안된다.

전자 서명에는 다음과 같은 유형이 있다.
1) Elgamal Digital Signature
키 교환 방식에 대해 공부하면서 보았던 Elgamal이 전자 서명에서도 나왔다. Elgamal 서명은 이산대수에 기반한다. 즉, 지수를 계산하는 것은 쉽지만 역으로 이 값이 a의 몇승인지 알아내는 것은 어렵다는 아이디어이다. 앞서 공부한 대로 Galois field에서 계산이 이루어진다. 그리고 변화하는 K값에 따라 같은 input이라도 다른 output을 만들어낸다.

2) Schnorr Digital Signatures

3) DSA
RSA보다 규모가 작고 빠르며, DSS에만 사용되는 전용 알고리즘이다. Discrete logarithms에 기반하며 Elgamal과 Schnorr를 적절히 섞어놓은 형태이다. 사실, Elgamal에서 다양한 S2를 만들 수 있었는데, 그 다양한 S2 중에서 적당한 식을 하나 골라다 만든 것이다.

4) ECDSA(Elliptic Curve Digital Signature Algorithm)
지금까지 소개된 알고리즘들은 Discrete logarithm에 기반한 복잡도를 가진다. 그런데 Discrete logarithm에 기반한 모든 알고리즘은 Elliptic Curve를 적용할 수 있다. 서명을 할 때는 타원곡선 좌표의 x축 좌표만 사용한다.

5) RSA-PSS (RSA Probablistic Signature Scheme)
RSA를 이용한 알고리즘중에 가장 안전하다는 연구 결과가 있는 RSA-PSS이다. RSA-PSS 이전에 개발된 모든 RSA 기반 알고리즘은 초기 RSA와 동일한 수준의 안정성을 가지고 있다고 한다. 단순히 RSA 개인키를 이용하는 것으로는 부족한 부분이 있었기 때문에 RSA-OAEP가 등장했던 것인데 마찬가지 이유로 Homomophic한 RSA의 특징은 장점이자 단점이 되기 때문에 전자 서명을 위해 RSA-PSS가 등장했다.  당연히 현재 상용 시스템에 많이 쓰이고 있다.